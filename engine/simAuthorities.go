package engine

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"github.com/FactomProject/factom"
	"github.com/FactomProject/factomd/common/factoid"
	"github.com/FactomProject/factomd/common/interfaces"
	"github.com/FactomProject/factomd/common/primitives"
	"github.com/FactomProject/factomd/state"
	"github.com/FactomProject/factomd/wsapi"
	"github.com/FactomProject/serveridentity/identity"
)

//
// For testing, this will generate hard coded authorities to assign to nodes
//

type authStackImp []hardCodedAuthority

func (s *authStackImp) Push(v hardCodedAuthority) {
	*s = append(*s, v)
}

func (s *authStackImp) Pop() hardCodedAuthority {
	// FIXME: What do we do if the stack is empty, though?

	l := len(*s)
	res := (*s)[l-1]
	*s = authStackImp((*s)[:l-1])
	return res
}

func (s *authStackImp) List() []hardCodedAuthority {
	return (*s)[:]
}

func (s *authStackImp) Length() int {
	return len([]hardCodedAuthority(*s))
}

type hardCodedAuthority struct {
	ChainCommits []string
	ChainReveals []string
	EntryCommits []string
	EntryReveals []string

	ChainID     interfaces.IHash
	ManageChain interfaces.IHash
	Sk1         [64]byte
	Ready       bool

	NewBlockKey string
	Taken       bool
}

var (
	STACK_HEIGHT = 100

	nextAuthority  int = -1
	authStack      *authStackImp
	authKeyLibrary []hardCodedAuthority

	chainCom []string
	chainRev []string

	entryCom []string
	entryRev []string
	/*
		chainCommit string =
		chainReveal string =
		entryCommit string =
		entryReveal string =
		chainIDs    string =
		subChainIDs string =
		privates    string =
	*/

	ecSec string = "0000000000000000000000000000000000000000000000000000000000000000"

	chainCommit string = "4#0001559d84bb9f19d9200f54d5d4cf4ace57bb34b47ee2478541c4283e5d62e1de94abbda5fede0d8a73a09a06de1a9017a97bb2f1a0fc15bddf6e8f87ff04fed41aa7fcf4e93feeeb5d506bd91316b983421d132deda0fa7350bea6585e251a4a7bda922fb4d10b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29e8718930ed70a18c457b0b8dfe28305194968c633cef2e724eeceb6ba7c02118317ccc73481d97037b7965eab22dfbdf5944efbd4cbb5a872df327c2e356db07#8#0001559d84f5304490a1969431ce920fee8107d09ce3475102816e16ad4ddc5dc9c5fd0729bcea6de3c7a01e9c60117d885637c567cad1dfbdcc75cddc88e1c6238aef947925c49715472ae17e1356174cc4aa33b66c49a8ceecf34a7f2ffbb66b14772034fd160b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29acec5800a245d5cff4864befcfde05fcc0bf0fa3533d2d366dd2833be9349c518db2f4b2d5eaef364828790391f617ecbaafd7bbd5d59cc5f7ea586677d26805#8#0001559d85a724519321bc89f537080a206e35ac6193592e1bfb3cd27d516340d4d37284f55cc58be8ebda4becce78690c7bc5d8fcd72fc665934eee0a2d11f98a95e9794153346bca62d068c1bed174d4a791148d946a5788c7acf7f01d9c06d0f4a6a3c70f4b0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da291594c94084876d0242555e7864bfcb8b41099ad7eea16fc0b3493186cb6bc5cdbfaf1535a185e8f826eb43cbfacf24343d8015f3e4064f517b393e0bba12f309#5#0001559d8617d482f16feadf3e81df3bea133f357b1264f761d1a81532aef4b2ddee92945f44f34d5908650077f72b5babd8d34b90ec25b9ca0c8ee69573bfa0a5ffce946806df6b11ab711bfca880ed0947c8d7abef72d1a77f6364b928dac05282c1113dcc8a0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da296acfa10a79e14cbcf3b7852e8f6eeaaa9b0f96e38331c15d495a1b12b60477263b475d8c3348fa09007ff97b8786e0da81e429b4bad071699dabdbb9eb015203#7#0001559d862f61f508301a5d5de05f0cb31ed095c6f27bf7994e003d0b45961974625b167fa77a7b6441ae47f67a331db65a40bca6ded555af1640d4291e76cedf26799c0353fb173581dee9afbcaf1d832e09c2f5e57cbab23eb64d4857ab81c220da77220b050b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da299c879b1399c987d486956d95ef59bca872bf88fb3d005082b7f5f600ff61fae37cebb125a7771daa098d010cc01b5550748cc4eefa3a73298ced2f2e59d45f04#5#0001559d86d2507bdfd4367f5cdfd23894349f295c0f515df935620a116d7c2f6229b4216a4f364a616ab15171da1d0d5687fbaa41c5dadea79b3eead382d57d7c3795976eea2d8ea91d1d1a79b656bb6559a1d1f44fbfdd2dd25a36975b17df6ab84edc0970c10b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29b0289355e78f6ad8d84e19663fad5f209701bb36d676ae95af317f1277d42ec0791df05bf060f097fa882d10cdc6a5d1fe0da10f11bbd53645b741bee324ba05#7#0001559d87787b8a6f2dd2f85fa54bc73f74010c77ef09d70124751fdbc876fc262fad953477629473b2bfa691bcc4cea1c75ab7c2d2ed7cbc95d1b1713a4ca8f6f9c6a2f6920b9703c36b05e309d96ac9c960740d17b9d11f2d216a6609093b8bef2ae3ae82d00b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da298de752e61801a447bea6b8742b63f00652b42349de4d0cf1a9f0d6547bb69e811be403d25c2e59cd07c792f722d4998f46f639e3d8b25af9b4ec35e9af1d6801#2#0001559d877fbebb5a550dd959cf90caa0318acedce6485ebb6533f6098a12fe0fa17ac6210a63c8edde0fece9814223028eb52bad752928c0db7e043ced5b6280a9d8798747fe04a6f5190a61ca66b9e24edc3552876544b11ea45b58d639ac5dd4fa47f029600b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da2963b191b58c350bb3ea336c9bd4dc5dba09e9faea40bb7bfd4c2ebc306776d9a01fe077e0ad3216a69e88df1282ba18f2e410f9fedb21cb64eecac9889bfacb0e#4#0001559d87997e120d0278b1aaa899f03069109c8640846a4aea4503f8f5949ee4ee9ac39beed4e22d0b926efc34c62c312451c0051051cb693168165036032c51634111cae24610d5d7eb10234826442b026f0065f3c878464c0410100304c5efc6ab982a15b70b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29711709a2e14427298dd454b76e55b8639d9c0c818ecfc8dc101c25b4335dde833619d5b7b0615d632c9c8d846586c614d48616377a5fc1255d4776cf83b88206#0#0001559d88491cb6f1a5c616603b116bdd1dfd9539548150b961239af2b3bfd2a398bdd4fe7cc26740133795134d1983b68c8684ebe3f5d0950d6991c9b5ef2113e88f839a2bb08976bd80d4591d12362b0bbc103fe5b66ac58cf692fc33e687b9a1f1a4630b400b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29d07fbb9dcff7790b05ffce74fd55bb5869d1bea4c5f965c8b13ab0d17eec83cea09f1eacfc8b4c227da25bf405d5f7b49b22dde80be92717be43c763c37b8d0f#3#0001559d88973342578dfb235a596c86d7e35a801451f89415ff391245c4698bb08b184f6d0af31a3610c25e724f9bf1ee11bedde2e8351e4866e406f18ed18ac07ce16d09e5e257090f2457ae72d866ffd0b1a0f911c2c30fcdc5d8a4464cbc8c85504f1a03580b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29e0c09f1494cfabf65e83b3a6456c0ca4571de43db852ba0d049a7dd573a04e5b3f32781651954405c913d134a3d907706751a46bc3164ab5e50ba246dc44e70b#0#0001559d8928928ccf272822114219ba8dbbbbe2259dda2cf4caa70aa62518e282c3fccfbc580ca0f90ef57fef9475bdfbffc1f87456854be0bdcfc11857d4ebce3d1d0cb2c7ac41f816dd065e322fbdb0e137b66614cfc518104839e5d7a655b808c01335298a0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29db8413696274bd1d14fe2e550dec295a9831296575dc55585bb74e7305631225a3541c6d1e04287b113348b7e9332e3fd92ee6ff8483e6e6cc6fd58a882f1603#1#0001559d89bb91e4b0e7974969f52c768785c355ee76e59bacfc41694aaf448d42acad54de244a658bff30667b7d410aa3180443e5b8e51756f355bfabe3b13b4f48b3751323cd1950c597e41f4a50ed5962342ee8ab19d0fcbb8b74d57f6cd8a3c14ad52f807d0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29e4f0251b9c5067084eed496e066bbfa0bb8f8754c40594d57d613475414bcc3fb9cc796e35f26e73479a514c5df5100b3082519914958bec6711c4318f0fc700#9#0001559d89c5e5dc0f7202f3bd3bb95a0b09607942ea2037e22e00fcf41ddee8caeadce863d782aa99d451a765cab6cf3a7f24766382c40a1c021a668199ee85057aae0fc089807a4c1aee6528ef5ecd98769980177fec36b87137754c7dbe65a9be24996ad5aa0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da290a3810753b8300688d08ce9b79c3cc7f112db66579d9300d8c9422d3015a36d076c2bd301b0beda6ea4ce15675350c29479b56955af419656303d4b07a5a6903#2#0001559d89e34bb4beb6dd823b3f82e306da00a9e68fdebc39a6a21b5f29a9cf319a93b7aa6444087f44d513d75ecce1760c81545c5cef103fc21225655d7402f7dcb29864c741679daee9e71c3ee550e3df89bb4d82254f009ffab3a1f3a95c22e4bfb590a4b20b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da297d0163aa2241c5e5e76624977e48999165197ec61abd07ae3d24ad6a7858abc56bae4df9f6e43f4f35142b0d4933b5e61c5335de525193bb861c4a2771de2700#9#0001559d8a12767773a76ce9ce26a8a3934ebc95f62c0774bab16246668abcbf0422438587732a9c85cc5c34fc34ac3cfd8e5c43468ea49efe1bcb7e052dbedc1cd03589cb8436be84416079cf14dcedf13f936e74e5085d8d80f891916080fe09d3b80ecc0f6f0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29f5b87a11c45cc867418cb5739ff84782f7de6df10a4323e799743b7ff999027b83e50237957031fa1622726b5dfd1e314216e9133071a034e00cc8dfb8998b0e#3#0001559d8a1e060f4eb167fbbfe4c477de476c65ac7c62d19feecd012d94951b5a7d0a0a58b8d52dddca88e08cd39ffc53f9ad87ace05383bfde971c0f99525bfebd30a244cb18f92fc965a69b0214500b9fec0c23dcff60bfdb1eeb142dab6c440aec3a501ff90b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29d0f6208ae1da5501b6b0d3bc51070079f8091f7e54a09b6529fdbf8afda902d61aaeb0d36ca02083214aafdd7292619699c8158207d6f826a8f90f9b73764a0c#6#0001559d8a653f48d2690eb1c9209665c066a1aecb9d74da2075cbd8fa3bde117abe0a5816d418bd4b9f1c2a757464f0fcbfe76e5e2daf08b896ee24f12b793720b64757fa6630fbd9f01a721d6a98e50f76596326e49ef00de93ad7e4b10d60907b38e04c3f3a0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29c61a0ea24be86c7dd4d10c535cd5e385c98bd1a00d03d493f0d6e3e757b8f92eee1760a5aa0847ca38231540acfb4062bf2ef3ed536c8c415ab17890e542630c#1#0001559d8b8befab20793e7ddab16471e705731643187940bf4ea274c5ac2c278abb80b03dbaef780d7bd21ac9bfad4466a6d582081d61ae7961f57289ea4a3576032866a4fdb8d235e698139c37f3a972c61351438f1f8937c740c6446b166c02e52d0bac6c150b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da296b373d868315a4ff91b44b05f8b982fea53b6a5627b4e8ca09e1a10fa7d5915863ab645e83ee01b9eec855522cc990e79e84baa5f479c5d9ba3f942f01b27600#6#0001559d8c8a4dc52b916232ad7a49faaf10d565381cdfb2e6d19af1c3ea9dd76ae5fb0fe11c5c91b58ff9a29870f2b2a9ebfe255f5683c17f8284c8032721fa05d740003cde869a7d0398356da783a080fa28850e6d6831cd5a2ed057cb054d39747f28161fff0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da290f39749d2a735a244d147adddc9a026f349765e2eccceda0d819e571617f391d4f6c8a55b46a184a1a41468189f5fdf7c317ff18b5d2f7c7f8dab8b3c4f73b04"
	chainReveal string = "4#008888883dd1c00856a2c3937a10f60006fc754c6a0240b5448b294971b8cdf1ab00a4000100000e4964656e7469747920436861696e0020c5bca76669a499149671c8da49745cd4f35f44f81e8f4be48cfd1fbead14b04800207ad54c477e51f95383a3431359bceb67198e9541ca418a46682d13a703a4761f0020e9cccb52494711179225037a43bb49b1bdf0e08f13a35cd5810a0cfabff71925002010ccf243b3b3f1b92d8670fd7dab580c2a683aeed6853b292f687c77175c73d7000731323434303837#8#0088888840fc2db10d231618666ac9158f5c2f8d2d69a0cdf44248c24b71e0704400a4000100000e4964656e7469747920436861696e00208a488e13c8690f31585fdb62f4b4dc2634dbb87a1dfbf230ab2b3b65a012faa00020a57fb243f3576deba98cbadd4a6081338740fad4d0f18877b48e538c6ceb36fd0020e2f532bd8475a11ba67b564eb8c8849e757ac54b2a8324fb0e33d58810eca0220020102e50664a828325457ca8b2529bfefde5c678afbd5746aa07c961ef011e6e94000732303532333531#8#008888888ca78a320706f162aa54795754623e3ef0b914544c6c39a9de6c28b11100410001000011536572766572204d616e6167656d656e74002088888840fc2db10d231618666ac9158f5c2f8d2d69a0cdf44248c24b71e07044000732393038393531#5#008888888f59c39de920596dd86f11c7e5bb48a04ae4c7719a937e2c1cdf172e0f00a4000100000e4964656e7469747920436861696e0020d1cdd3efa19733057e1fdd6b1ff6f4ef22b2ed3131891e8d11d25f272427837d0020b0eabcf35bdfbe6b28fa8a5fa1905e0660a6e9af4cd6fa9f69b0ce6aa77a1d6300200fa3a5d555234efccc264f3fac7bc25375411b4441145b063edd351e767c89b40020e685c0732dd805245a8abff99ec4d5f03e73a59045a455f8aa8f8d02ae4c1ff0000736333936393731#7#00888888c2ff8859855a3d75ed757655500a57aa9df0b81b2a03621f526085c05100a4000100000e4964656e7469747920436861696e00200ab4856c0d546ead7bfbf8002287384b8f99a14208d4fd96d6567c0d57ce3d820020f0f7bc31ddc07733b0e7b871fbf0930a4fe9b96b70d49b63c29c964eb08f1ed3002075d5e75d1e273af966c733c704324be9cf042a433459ff1cccc079fa7285b05a00204f5f8b00e707ba050594c2263005c299dba6900e9c199e171069fcff4751857f000736373536363635#5#00888888ffd5ad984359fd80b9bbb5880a358a8db8f6ba33f272ba5e033216c41500410001000011536572766572204d616e6167656d656e7400208888888f59c39de920596dd86f11c7e5bb48a04ae4c7719a937e2c1cdf172e0f000733333937353635#7#00888888fbe9d11c6aaae27d8c99ee5a6c54391d241e62628ee6a82f03fabb110200410001000011536572766572204d616e6167656d656e740020888888c2ff8859855a3d75ed757655500a57aa9df0b81b2a03621f526085c051000736333639373431#2#008888884c239c111430cb2add2dbc29385ab275701d4707ad3c0b21ad6e51dc9700a5000100000e4964656e7469747920436861696e00202296ebf6e6b5277a92bbfea03741c21ada63b540873d14cf8e08349b11a46a010020f29753191f26fd16f681f6145a029b10dbb75dabc62d6eb340dbd34041a5f8040020b3d836b6f67940337824810ec5c7db7dd63e3ae0e10a834be64e65cbf2ed49540020e8589cc0e9c986432c40749f5df88a182375bce2d03ac0e5a7a0fd25cc5fe93900083132343635363437#4#008888883c3f77696c8d17b65c4ebb445c9a77ab1132a22ea9b1e293d88f6e0f4c00420001000011536572766572204d616e6167656d656e7400208888883dd1c00856a2c3937a10f60006fc754c6a0240b5448b294971b8cdf1ab00083133343933393630#0#00888888094c01e11f1230609f8d034a96b30832e35cbb326df10a40852f7ccdca00a5000100000e4964656e7469747920436861696e0020e838cc60ab6c9c9f2af8b031a8405cecad63adae515bbefdc0dfc808d260dfde0020af0dfb1089644d8c86c45a4168cdcfc41ac9bf6829f56a9057673a0ce7a2c4e00020a7722e91aa55267644cd868e86ac89d83d14a1a3f12450451e731cf3860ce7de002063aacdaff22a20dfe304c5eaa1e82c3664400e5ed1b9939539424bbe117d4c6100083137333539313031#3#00888888d41b64ea7e939fa8bcd7a71187350022edd862bfe45dce73d98fd20c0f00a5000100000e4964656e7469747920436861696e0020405b7465c613bcc806064d45d27357742e7b278391d4977bfa6037a45d8e3fd500209bf8d4ce273f68f7ec1be0310b37a731caae1cba2b5d9b3321c1cff8e26348c200200e01ecc55abfeee94907212ff93716f9b44e794910c66d093abe6f49f63605df0020f2680d4ea9709fd9c94635361990e4688d41aee4fd981b66b3ce032ef473809e00083139313631373130#0#008888888bcc50711a24693cc91dc3b1b158964f836b824f86aa68de137cadc69300410001000011536572766572204d616e6167656d656e740020888888094c01e11f1230609f8d034a96b30832e35cbb326df10a40852f7ccdca000736313730343033#1#00888888df209366d4723fd8ac49bcedae83b3da6b2ff54e4f5455449794b9334600a5000100000e4964656e7469747920436861696e0020778f15e9bed62597080de7d25c4c3688be5a530d515fca5f77b636686bb6b53c00200d90be88f55f7c075d5be2bfa985a0282a0de523fe8aa20f403ca074987465860020f29f231dcf6219a0bad21faf3f9af5f7a56418206ae94e98f411ca531d683ce2002014b072ac100f9ceaf5d93064dbfa6b10763f84ca1e3c8140d269a8e9662848cf00083237323830353230#9#00888888dc79f3c26bb90a3a0451f4ba16ff99aa9584291f6eca478a50a1d3ab7800a5000100000e4964656e7469747920436861696e00203d667335d634f9bd3f5953bf3634a301c8b26bf6ce7af5e13888274f91468dcd0020ed8543799afe04d9a49dff2537faac9a1b853739ace69dcd052075d38fac306d002092c5d86bba3e0afa779d5150824c25af29110b01294e920a38dc8d3ccf594a2900200c9f2109654e6b13e1952be083c7eee9ee9c14f794a9f30069c86a021249a07300083237333935363336#2#00888888acd50febe858ab7811afe36f417111c8e316c77a85c81b40b0f667ca1500420001000011536572766572204d616e6167656d656e7400208888884c239c111430cb2add2dbc29385ab275701d4707ad3c0b21ad6e51dc9700083137363430323730#9#00888888d126f3337c4a9c229c74f758d65eff24f25f0e74a3d774c0a94ba5e1da00410001000011536572766572204d616e6167656d656e740020888888dc79f3c26bb90a3a0451f4ba16ff99aa9584291f6eca478a50a1d3ab78000732393330393133#3#00888888a9b945673fd1d35b9963f512ec47802b50830dd9f06edaf859fea9354900420001000011536572766572204d616e6167656d656e740020888888d41b64ea7e939fa8bcd7a71187350022edd862bfe45dce73d98fd20c0f00083132363936343834#6#008888887cf58dbd0f84b2099fc498069c4461252081a5f5ebd18f8ea84346e5ba00a5000100000e4964656e7469747920436861696e00202c939a9bfc7f148d4bc7005d8c04de59c945dcf7410284c2ec5aec2dc93dad0a0020f651f80d998136b95c5e5b14e3ffce33f6f03f1dad1fe0541441e8417aef3582002013cf72142ed7078292e16f260b6edcfbc123df834a3f7cd9c36e4ea8017da5e20020c8215c17c5af37b51c71739d390e03c52231649cf73e16a9af7a394e456e09dc00083335343132383430#1#0088888866a26f1dfe181204b3deac0ecb4f0b8e3567a2fe7fa560c6fa64d90e8800420001000011536572766572204d616e6167656d656e740020888888df209366d4723fd8ac49bcedae83b3da6b2ff54e4f5455449794b9334600083336333337333735#6#008888887e5cae241c548d6781fec44f869d0ea859a76d440d12fd397be2d2765700420001000011536572766572204d616e6167656d656e7400208888887cf58dbd0f84b2099fc498069c4461252081a5f5ebd18f8ea84346e5ba00083530393135303130"
	entryCommit string = "4#0001559d84bba6dbcfb1f3097485cb310854c507634a8ce10e6bd56911771be1943152d3c35a6c013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da296e87697e456b6ffa64d229034d30c70b0a0c2606ab26367102e32f979990584efec674e4c256817eafa1f16aa08a9ba5e79d670f0a828d1c92b8e1c8006ff100#8#0001559d84f531f453760250d3c87d1628516d78e45dc58bb331f6d24119d8c07044d7d9bbc78b013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29e298415a0a9410d58988f05e39b625a1ecf98e74efdae6dc2ef374f24add49847e94969d9bf42ae8b180c8b8866cafb5e79c49461ea106af59119e4499250702#8#0001559d85a72c64f48deeac4821f33e64827e9e51caa97bed35d67012bd2b25d7099c33958082013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da298b89b6357ea9ed2603fcc413ef56c19f3765be98dea7db0b223040587acff7b46e401894c0812b2cab921a48fe282784e4d20519586a7ad228f046502061fd00#5#0001559d8617d5560533334809211bcc9fe97beb382b58b20d70c1557cac1690e1330655dc9f2d013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da2907f32ed00faf522d67a334b876959483ad650c276b620471df7472bf39a661e0b6282a6af9de9f7dd9e2ad51bf79ec8b39f1a4fc434ab89d798b8b0d1026df01#7#0001559d862f63292690cac12404e9856bd2a8c28b177dc55226d8ad972eae0882f598ec43a4cd013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da298625bf7ab133f744669854e9533b5f46391fc881150aa73978b4d8eb401037089a88f6b401328c8365a7ce4b53b8c9541e4bc04258110e28b3b9111f69819200#5#0001559d86d2534c39f63a98aa91beaf5b203b5711ded5307a3e4814c09482d3bb3d6c8c46f20b013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da295d685f987cb708b2b882fbd3ade8032b67c0569f823506dcede24ea6e03c84e18e14199b6de52ef8112773bcf85d69daa453bc900e91275e3b712d2a6da45b0b#7#0001559d877880c6c8465074f6d403d160feb4f3bea2a5822d5069ecc35728ed289635a6e0dc2a013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29497ad354daa405a7ccbee16222bd57261fee49fea7efaa22ad5259441e9e7f5217132623e9136245b8a3ec3d613cf64631b3476f89ffe38debed208bbe4bf20b#2#0001559d877fc6174345678dcbfafb6746ae91d63b208463cba2162e7f7870174f50f80305affd013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29e8b258c4df7aaf2792002efe9c2dd985f353b238dcf5453ffc09352d33f05ff8e4341ed2f0b6143895ffbb5648a83957e86bed87e4ac02bb4cb1c3eab902d504#4#0001559d879982b83941b16664bebdad57ac2586d40d131f23506299a89dd8b6ccd0e14ead661d013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29fa3e17a60086c2c2b4b38b4bf17beedfd118df7679f86f28daa11f458c9428a594ff1091387e9e35a37d27dcb9f841062d151f07f6df5b24d38bfd7429ebbb07#0#0001559d88491f883074d2ea296754f0724fdfee829afe304a846cd42902d6e0bbe13f0d34b2a5013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29a4e3a2456d85f90a7b9e4dc549cb67a06cc62052fd88aa2dfe7bfe27c1bdef132ce13e461fc7366d5e5442e4bb104a08758a968534efafc76b0663cd95ae3904#3#0001559d8897357c877990eebc2562c73839f844498cbdd20dee2260d9c85dc05d9db906da8004013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da296d62b2c9e43e51c65140fc35d890fb222c782bb4ac396d85b46e42866cbf8d768ec0289253dfdd97112d0df43f5368e2dc51791110bc5bb2096b9c124eb3990a#0#0001559d892893b7d69b03541d43b4da3af2afe5839c0dc1dc179926d030aeaeb6304f4f72252e013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da2974795205804261b8252d19518dfce7ebf09992d5ed9d65338742aff15fb08265eba543ba22d142eda6ac9edbd9ab7166cd4e59771ddb76e7ec8ce42dc11b1107#1#0001559d89bb93e74f433bfbc0d79512b96093fc0a53d176ca72ab2d0ee33b20b767961f25318d013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da2979526cc5b2870e94f14734fdc9191004972233ab39ddf08ca9debe2022905cfa6ce546d46ca4c42366449da6b0903d2b4e2e66880b6bb98a7c0912ae2de68506#9#0001559d89c5e7f60305919f8ae07c12f132dfefd4a9416614983f1daa1a7238d8625ec8f700e8013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da299e69538680d1bf8d273054b84ef8a3b8132f1756a0ce74493487f9c9c95f5cff3c22ac33c6c467a404dcb0f36320989d61419acc5813997d8a1d5e744051b407#2#0001559d89e34d158f88f22d10805b66886152b351146035a9e183bbeac8aae8707ef92216c00c013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da2971328a77ccbaf03e9532bb5de5204bc49857f5fe6dd7c76f59ba92830eff9d5ddf7e99980f52f97afa4bd8305e527e483fec09f4b1ec630185e7b2423b9f4a04#9#0001559d8a1277258e37b7447efc8df03c932ec23f640d31c4b01f66f25d077ec7de8a399349d5013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da2903246186fb03fe7da42765825e90345083004f4b8eeae883d038d45a230d182307c68957bc423189cf5fd81a99cd5f9d435b20e0acb72d8d3c8d1b5def2ea100#3#0001559d8a1e085083e6cc07a98eab2427007bd1dcb1be0f3f2b6dc39f6e8a8b5b7c132a23c794013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29a15b284dc94ac7e9220db6b5c8fcb5f5f4c319fa76219ade41879c39063719c2d543566ab50ccefb9ad5da1906ac90fa2e1bff1466d7ca9a0a2666b2c7b8e208#6#0001559d8a65405bcf4e7b692cf2b070bc34a962b474c96a6217d7efdc96dd5890480fc048bf2e013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29f8b12d791c43bd535134b8514780fe3e495a7d649ce6f00b2a643609200fd7a19e8a8406c24952348f3cfd58da5b8e09f6da201d2df999f4891d0bfd5d253305#1#0001559d8b8bf044cd3ba09e7a8e7c76da83016d12e17657281ee5535f33754187a2d4a8b4c9ea013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29a1c5cf282e6b7def05e0b0ad866df9fedb22cf5cf1500cc40404b62a55808ad10bb53aa315645be427688155bca3029c0b7faa8f98c97f9a5afbc8863c61330e#6#0001559d8c8a4f7887346f0593fba3212faf9e4ffde0cc40e27206138cab7101671e5b3899d8d9013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da296ea5712e0bac4c7c1ee3c8619583b06de5fc065b142a7061f1d463e2b194312b6ab658e92580a9b64e4aed95aac4ced6eb8d16af533b9214b40993b7f67b5b0e"
	entryReveal string = "4#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e7469747900208888883dd1c00856a2c3937a10f60006fc754c6a0240b5448b294971b8cdf1ab002101a575e55dfc6d7f22eaae6a83455d9984e805afec23411aeea86d10de0881536900408369d2dffea8b4a5b2343ee87e25df6c4ec2d6a74909849c16b21dc0096930762be84a503411c86a51de6ea021f90215b0f5bee7cd0c959674a7f0b7caebd909#8#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e74697479002088888840fc2db10d231618666ac9158f5c2f8d2d69a0cdf44248c24b71e07044002101756ae5009e249b240c46678d0ef854f375a652edef8fcaf452370cc859ebdc640040eba44976b228a19300726c06a18aeafa37cd7aba14da143b35aa79575ad31ed7d181486523d0a9cd9063ac64a37bfbfa26fc2e9a1ba7350267d97b949eea050e#8#0088888840fc2db10d231618666ac9158f5c2f8d2d69a0cdf44248c24b71e0704400a6000100001a526567697374657220536572766572204d616e6167656d656e7400208888888ca78a320706f162aa54795754623e3ef0b914544c6c39a9de6c28b111002101756ae5009e249b240c46678d0ef854f375a652edef8fcaf452370cc859ebdc640040b3d311bae8ca64062e8612e844dd25fb4db38c43781237779d96e212881427cd9c80603709fbbef128549b5f25d51f1f73bac3e3cd5ab37550225c91accdd604#5#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e7469747900208888888f59c39de920596dd86f11c7e5bb48a04ae4c7719a937e2c1cdf172e0f0021018716096a2c9d448988cd3b3637b53e02e31f1661cd73f4c965d710c849ec50cb0040d5b7dd78bcd60934790ed9f3bd1d37bcd9fe59fb1a0af65f07fbedc1e21ca8119fb7b379978944145eb4f7466023eeacc52c1696b111b341155d896f139bb309#7#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e746974790020888888c2ff8859855a3d75ed757655500a57aa9df0b81b2a03621f526085c051002101bf706ded7ccd3ae869f6ce0a17d43140ca2e188423c2e470d2eed43a639cecc60040a51c9c158c3655f525442da9d3891d1a2fe64260bf668410a50f2a6ceb7fab7bdd370c938083377dfe5fb85fd46715d2f2ff1bda7ab8eb178ee62c2f5258780e#5#008888888f59c39de920596dd86f11c7e5bb48a04ae4c7719a937e2c1cdf172e0f00a6000100001a526567697374657220536572766572204d616e6167656d656e740020888888ffd5ad984359fd80b9bbb5880a358a8db8f6ba33f272ba5e033216c4150021018716096a2c9d448988cd3b3637b53e02e31f1661cd73f4c965d710c849ec50cb00401c9d83a872933ebb301ba0ebb229bae529d75e690ec79453ce8198e26896fd65063ddc8f115920ca23d8ac79a0a53b3ca35df5bd45ee6e9569ab66da05426707#7#00888888c2ff8859855a3d75ed757655500a57aa9df0b81b2a03621f526085c05100a6000100001a526567697374657220536572766572204d616e6167656d656e740020888888fbe9d11c6aaae27d8c99ee5a6c54391d241e62628ee6a82f03fabb1102002101bf706ded7ccd3ae869f6ce0a17d43140ca2e188423c2e470d2eed43a639cecc600400d8e45d2105e3e2d41ecb637cc313f21f12165940295718a45dcc7b0be5a936adb5aea811bc766621dcd47b62b430e20e132a356030efe56f84d198b58448008#2#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e7469747900208888884c239c111430cb2add2dbc29385ab275701d4707ad3c0b21ad6e51dc970021012e0a694ca5e5d95ec38c83549b86964e084276205cec31aa377cf7f1583f47d40040b0012307a4edc75c1a38325d75e4736a93ff8da728a95486c9d42b212df2bdcc043001fada87e6a10b57a9f4b7fb5eb94d9cf0778992eb5922db8ab756cf200c#4#008888883dd1c00856a2c3937a10f60006fc754c6a0240b5448b294971b8cdf1ab00a6000100001a526567697374657220536572766572204d616e6167656d656e7400208888883c3f77696c8d17b65c4ebb445c9a77ab1132a22ea9b1e293d88f6e0f4c002101a575e55dfc6d7f22eaae6a83455d9984e805afec23411aeea86d10de088153690040b8bf4e74fd764cfaaedf348e03e06bcc712304512e7b66d82121beec47d694a834d258b214985bad097d4c00642f7d2a764ff20d4a3c7e55edb099861ec0ab07#0#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e746974790020888888094c01e11f1230609f8d034a96b30832e35cbb326df10a40852f7ccdca002101e29a231b405ddb2a5eb963a15b2f06656adddbce2294c1fa33366540b6b2dd0900405bd0a41278ec99acda93edb493d17b20748e8c40cf45777ac2e44b97a8693e36a4e66fcb5bc8df6e8bd15c4ef58b1ab726004a0dbe73bdad228ffa005254d60f#3#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e746974790020888888d41b64ea7e939fa8bcd7a71187350022edd862bfe45dce73d98fd20c0f002101ff36689b5f57162e6d69e612adb65f5af6e32f7c3974044872ac7d64758313e30040349a842892b05c6b7643eb95204317801c8a467db0f145de008802f176c7c873f49d7b3b2bd9ca582defc45bfb045a446fa93428e9f239f4716aa0acf6cfd702#0#00888888094c01e11f1230609f8d034a96b30832e35cbb326df10a40852f7ccdca00a6000100001a526567697374657220536572766572204d616e6167656d656e7400208888888bcc50711a24693cc91dc3b1b158964f836b824f86aa68de137cadc693002101e29a231b405ddb2a5eb963a15b2f06656adddbce2294c1fa33366540b6b2dd0900403e42cc77504746565c50b0dd7063a991e88d33c372781e6ddf9763d822aeb24bd993a21f5c72b649aff9d66130f76f5bde551e9d32d728423a5a912bc260bd0f#1#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e746974790020888888df209366d4723fd8ac49bcedae83b3da6b2ff54e4f5455449794b933460021017ee3fa3c1228fa6a49a5e25d29e41eaa70fd712485a0233941bdd4b6d7f1980a00403f4041d5e1edca9de4e7c460c5ca1a6212bbf00a5616808bcc79fca2d7faecabb816b7f2424ea65225ef14b35463423e8bfaee85867986b673bdd07b1ebd1706#9#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e746974790020888888dc79f3c26bb90a3a0451f4ba16ff99aa9584291f6eca478a50a1d3ab7800210156c0174db2f5cc6cb5c734c34771214f04bc12182e76e40eda890fdc39c8642600403e2a6d443dbf68b6a9491c57cc45a52f0fb97c80ef5f1fb7d917d6dc854d2cf0aef8d53f1458a056bb8f9c4247e979ebc2e6e4d625379071937c0c679638e503#2#008888884c239c111430cb2add2dbc29385ab275701d4707ad3c0b21ad6e51dc9700a6000100001a526567697374657220536572766572204d616e6167656d656e740020888888acd50febe858ab7811afe36f417111c8e316c77a85c81b40b0f667ca150021012e0a694ca5e5d95ec38c83549b86964e084276205cec31aa377cf7f1583f47d40040baf5c8d17a0c7a338f91c08515dada091e07daf7bfedd7e73ed97e7c8215223b5527b6439a07cfda5337e45f66d3996a3a085fbc936cb27422b973fc03831d04#9#00888888dc79f3c26bb90a3a0451f4ba16ff99aa9584291f6eca478a50a1d3ab7800a6000100001a526567697374657220536572766572204d616e6167656d656e740020888888d126f3337c4a9c229c74f758d65eff24f25f0e74a3d774c0a94ba5e1da00210156c0174db2f5cc6cb5c734c34771214f04bc12182e76e40eda890fdc39c86426004079813b4019685023d7b618906af6cff34fd7c33a798e942487860ee548f594001181e6c40ecf727a6780ddeefa9f0deaffe5ea8beb820a7693f9aa5ad5db8c0a#3#00888888d41b64ea7e939fa8bcd7a71187350022edd862bfe45dce73d98fd20c0f00a6000100001a526567697374657220536572766572204d616e6167656d656e740020888888a9b945673fd1d35b9963f512ec47802b50830dd9f06edaf859fea93549002101ff36689b5f57162e6d69e612adb65f5af6e32f7c3974044872ac7d64758313e30040db1fd699a689e3d4159f9f31ffad0d7a761d16f25a6745fa905b7c92562199161b6e219346be9a982ab49f12723e7acb8d99a8ac6d74ae203657b4d93d13950c#6#00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500a40001000018526567697374657220466163746f6d204964656e7469747900208888887cf58dbd0f84b2099fc498069c4461252081a5f5ebd18f8ea84346e5ba002101ffe04cd38c395c6299d018d5d49ed0fb403b3550ab99033c408be08ee12f73df0040453002e9a7086e3eed7c28e3bc0d0339c1b72ea22b01fd8302ddcfead40db1f5c9e1725618953d3bf85cf1b12cf6aab63bfe0807bb1e1b8196b060a149d58305#1#00888888df209366d4723fd8ac49bcedae83b3da6b2ff54e4f5455449794b9334600a6000100001a526567697374657220536572766572204d616e6167656d656e74002088888866a26f1dfe181204b3deac0ecb4f0b8e3567a2fe7fa560c6fa64d90e880021017ee3fa3c1228fa6a49a5e25d29e41eaa70fd712485a0233941bdd4b6d7f1980a004071b27828f2efdb08a79f11e8c8eaa08503f4eb5b51acdbfb46f2bb713d7c7c0e724c8dfd82a12b6996a8e578879f4eff6b8bb6c0f240b8eabc9ab6eae50bdd07#6#008888887cf58dbd0f84b2099fc498069c4461252081a5f5ebd18f8ea84346e5ba00a6000100001a526567697374657220536572766572204d616e6167656d656e7400208888887e5cae241c548d6781fec44f869d0ea859a76d440d12fd397be2d27657002101ffe04cd38c395c6299d018d5d49ed0fb403b3550ab99033c408be08ee12f73df004066b72c1037053eb5d1ae58a7ca997e161917e207b770da06e545f004eee04ddb739fa1845327eb633b1efd7aa63b4a2948f389e578e2627c12fe828b54305d0f"
	chainIDs    string = "4#8888883dd1c00856a2c3937a10f60006fc754c6a0240b5448b294971b8cdf1ab#8#88888840fc2db10d231618666ac9158f5c2f8d2d69a0cdf44248c24b71e07044#5#8888888f59c39de920596dd86f11c7e5bb48a04ae4c7719a937e2c1cdf172e0f#7#888888c2ff8859855a3d75ed757655500a57aa9df0b81b2a03621f526085c051#2#8888884c239c111430cb2add2dbc29385ab275701d4707ad3c0b21ad6e51dc97#0#888888094c01e11f1230609f8d034a96b30832e35cbb326df10a40852f7ccdca#3#888888d41b64ea7e939fa8bcd7a71187350022edd862bfe45dce73d98fd20c0f#1#888888df209366d4723fd8ac49bcedae83b3da6b2ff54e4f5455449794b93346#9#888888dc79f3c26bb90a3a0451f4ba16ff99aa9584291f6eca478a50a1d3ab78#6#8888887cf58dbd0f84b2099fc498069c4461252081a5f5ebd18f8ea84346e5ba"
	subChainIDs string = "8#8888888ca78a320706f162aa54795754623e3ef0b914544c6c39a9de6c28b111#5#888888ffd5ad984359fd80b9bbb5880a358a8db8f6ba33f272ba5e033216c415#7#888888fbe9d11c6aaae27d8c99ee5a6c54391d241e62628ee6a82f03fabb1102#4#8888883c3f77696c8d17b65c4ebb445c9a77ab1132a22ea9b1e293d88f6e0f4c#0#8888888bcc50711a24693cc91dc3b1b158964f836b824f86aa68de137cadc693#2#888888acd50febe858ab7811afe36f417111c8e316c77a85c81b40b0f667ca15#9#888888d126f3337c4a9c229c74f758d65eff24f25f0e74a3d774c0a94ba5e1da#3#888888a9b945673fd1d35b9963f512ec47802b50830dd9f06edaf859fea93549#1#88888866a26f1dfe181204b3deac0ecb4f0b8e3567a2fe7fa560c6fa64d90e88#6#8888887e5cae241c548d6781fec44f869d0ea859a76d440d12fd397be2d27657"
	privates    string = "4#2f08c7199cebb237d44f2d4139ba5de47e668f093442666a9811b62543350809a575e55dfc6d7f22eaae6a83455d9984e805afec23411aeea86d10de08815369#8#2a971c5d050c5f00cc5767026e80846a1aa3b0b052253ca4f5f892b15a4efe20756ae5009e249b240c46678d0ef854f375a652edef8fcaf452370cc859ebdc64#5#e2830e2a112b2d5771dff6b72d1bd97ba3990c16c610089745d39986fb1c17d78716096a2c9d448988cd3b3637b53e02e31f1661cd73f4c965d710c849ec50cb#7#ecb74484061433b0012e14fb1b650ec37d15b00dfd492479358bc4bddfb85ddbbf706ded7ccd3ae869f6ce0a17d43140ca2e188423c2e470d2eed43a639cecc6#2#143635fb3e4a43216b7131636ad0039ca34e028e340f43797b2437f8878d7ca42e0a694ca5e5d95ec38c83549b86964e084276205cec31aa377cf7f1583f47d4#0#073e2d49fccb7fc2616a07ca56d9095ee2264cb2af17266c95e560b651d57073e29a231b405ddb2a5eb963a15b2f06656adddbce2294c1fa33366540b6b2dd09#3#26027e822add6928174955b33ccdefeb63c7edb9dd9c0d8528a5dcbb44fa1ff9ff36689b5f57162e6d69e612adb65f5af6e32f7c3974044872ac7d64758313e3#1#a4205f0ba6ed82ad1b42f16b8b5191031f97e1cd03722ae4615b12249f5499a27ee3fa3c1228fa6a49a5e25d29e41eaa70fd712485a0233941bdd4b6d7f1980a#9#30a0e7cf62d945a0abc85ac668ff84dc2f0ef9a05141d83bab4978ea3d8cb6ca56c0174db2f5cc6cb5c734c34771214f04bc12182e76e40eda890fdc39c86426#6#3939254711c81c52dc7fb188bb6a4891d5e0de8bd401ab447a51e607f28661f6ffe04cd38c395c6299d018d5d49ed0fb403b3550ab99033c408be08ee12f73df"
)

func setUpAuthorites(st *state.State) []hardCodedAuthority {
	// 0201559923a3d401000183ddb4b300646f3e8750c550e4582eca5047546ffef89c13a175985e320232bacac81cc42883dceb94003b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da2901718b5edd2914acc2e4677f336c1a32736e5e9bde13663e6413894f57ec272e28da9e933ab39800c03e61b8740e2d7ec95d0019421a995d00bc4d1e52a1a3e1d68bf8d0d05e41396ba0fc867cc3d5febf5bf6baf187ef3291a874b876027c4e03
	blank, _ := primitives.HexToHash("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
	exists, err := st.DB.FetchHeadIndexByChainID(blank)
	if exists != nil && err == nil {
		authStack = new(authStackImp)
		authKeyLibrary = make([]hardCodedAuthority, 0)
		list := buildMessages()
		return list
	}

	inSec, _ := primitives.HexToHash("FB3B471B1DCDADFEB856BD0B02D8BF49ACE0EDD372A3D9F2A95B78EC12A324D6")
	inAdd := new(factoid.Address)
	inFS, _ := primitives.HexToHash("646F3E8750C550E4582ECA5047546FFEF89C13A175985E320232BACAC81CC428")
	inAdd.SetBytes(inFS.Bytes())

	outAdd := new(factoid.Address)
	outEC, _ := primitives.HexToHash("3B6A27BCCEB6A42D62A3A8D02A6F0D73653215771DE243A63AC048A18B59DA29")
	outAdd.SetBytes(outEC.Bytes())

	trans := new(factoid.Transaction)
	trans.AddInput(inFS, 1e9+1e6)
	trans.AddECOutput(outEC, 1e9)
	//trans.CalculateFee(1000)
	//trans.AddInput(inFS, 1e9)
	trans.SetTimestamp(st.GetTimestamp())
	rcd, _ := hex.DecodeString("646F3E8750C550E4582ECA5047546FFEF89C13A175985E320232BACAC81CC428")
	nrcd := factoid.NewRCD_1(rcd)
	trans.AddRCD(nrcd)

	dataSig, _ := trans.MarshalBinarySig()
	sig := factoid.NewSingleSignatureBlock(inSec.Bytes(), dataSig)
	trans.SetSignatureBlock(0, sig)

	t := new(wsapi.TransactionRequest)
	data, _ := trans.MarshalBinary()
	t.Transaction = hex.EncodeToString(data)
	j := primitives.NewJSON2Request("factoid-submit", 0, t)
	_, _ = v2Request(j)

	authStack = new(authStackImp)
	authKeyLibrary = make([]hardCodedAuthority, 0)
	list := buildMessages()

	return list
}

func buildMainChain() {
	mC := new(wsapi.MessageRequest)
	mC.Message = "0001553ba74d8faa6ac2d4961882f42a345c7615f4133dde8e6d6e7c1b6b40ae4ff6ee52c393d024cbe2e7f360baad36a66b4f063f1f1b9f57f25deb35aad8fba8905cf2893eec1be40ce17636636117d9469de0f027cd74754e0e1871d249dfefac958d0f91de0b3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da299999aa8cfd722db62c61e53c7dbf9fa4de1a64b9891844f1d53b78a4cea3294fb6b88e5b53e5f132e32e1b1176335ead8ed351787457b9219f7743cc51b42803"
	j := primitives.NewJSON2Request("commit-chain", 0, mC)
	_, _ = v2Request(j)

	mR := new(wsapi.EntryRequest)
	mR.Entry = "00e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85500004d61696e204964656e74697479204c697374"
	j = primitives.NewJSON2Request("reveal-chain", 1, mR)
	_, _ = v2Request(j)
}

func authorityToBlockchain(total int, st *state.State) ([]hardCodedAuthority, int, error) {
	madeAuths := make([]hardCodedAuthority, 0)
	skipped := 0
	//for index, ele := range list {
	for count := 0; count < total; count++ {
		if authStack.Length() == 0 {
			return madeAuths, skipped, errors.New("No hardcoded authorities remain")
		}
		ele := authStack.Pop()
		exists, err := st.DB.FetchHeadIndexByChainID(ele.ChainID)
		if exists != nil && err == nil {
			skipped++
			count--
		} else {
			nextAuthority++
			for i, mes := range ele.ChainCommits {
				m := new(wsapi.MessageRequest)
				m.Message = mes
				j := primitives.NewJSON2Request("commit-chain", i, m)
				_, _ = v2Request(j)
			}
			for i, mes := range ele.ChainReveals {
				m := new(wsapi.EntryRequest)
				m.Entry = mes
				j := primitives.NewJSON2Request("reveal-chain", i, m)
				_, _ = v2Request(j)
			}
			for i, mes := range ele.EntryCommits {
				m := new(wsapi.EntryRequest)
				m.Entry = mes
				j := primitives.NewJSON2Request("commit-entry", i, m)
				_, _ = v2Request(j)
			}
			for i, mes := range ele.EntryReveals {
				m := new(wsapi.EntryRequest)
				m.Entry = mes
				j := primitives.NewJSON2Request("reveal-entry", i, m)
				_, _ = v2Request(j)
			}
			sec, _ := hex.DecodeString(ecSec)
			ec, _ := factom.MakeECAddress(sec[:32])

			com, rev, key := makeBlockKey(ele, ec)
			ele.NewBlockKey = key
			m := new(wsapi.EntryRequest)
			m.Entry = com
			j := primitives.NewJSON2Request("commit-entry", 0, m)
			_, _ = v2Request(j)

			m = new(wsapi.EntryRequest)
			m.Entry = rev
			j = primitives.NewJSON2Request("reveal-entry", 0, m)
			_, _ = v2Request(j)

			com, rev = makeMHash(ele, ec)
			m = new(wsapi.EntryRequest)
			m.Entry = com
			j = primitives.NewJSON2Request("commit-entry", 0, m)
			_, _ = v2Request(j)

			m = new(wsapi.EntryRequest)
			m.Entry = rev
			j = primitives.NewJSON2Request("reveal-entry", 0, m)
			_, _ = v2Request(j)

			com, rev = makeBTCKey(ele, ec)
			m = new(wsapi.EntryRequest)
			m.Entry = com
			j = primitives.NewJSON2Request("commit-entry", 0, m)
			_, _ = v2Request(j)

			m = new(wsapi.EntryRequest)
			m.Entry = rev
			j = primitives.NewJSON2Request("reveal-entry", 0, m)
			_, _ = v2Request(j)

			madeAuths = append(madeAuths, ele)
			authKeyLibrary = append(authKeyLibrary, ele)
		}
	}
	return madeAuths, skipped, nil
}

func makeBlockKey(ele hardCodedAuthority, ec *factom.ECAddress) (string, string, string) {
	blockKey, key, err := identity.MakeBlockSigningKey(ele.ChainID.String(), ele.ManageChain.String(), &(ele.Sk1))
	if err != nil {
		return "", "", ""
	}
	entry := blockKey.GetEntry()
	str1, str2 := getMessageString(entry, ec)
	return str1, str2, hex.EncodeToString(key)
}

func makeMHash(ele hardCodedAuthority, ec *factom.ECAddress) (string, string) {
	mHash, err := identity.MakeMHash(ele.ChainID.String(), ele.ManageChain.String(), ele.ChainID.String(), &(ele.Sk1))
	if err != nil {
		return "", ""
	}
	entry := mHash.GetEntry()
	entry.ChainID = ele.ManageChain.String()
	return getMessageString(entry, ec)
}

func makeBTCKey(ele hardCodedAuthority, ec *factom.ECAddress) (string, string) {
	btcKey, err := identity.MakeBitcoinKey(ele.ChainID.String(), ele.ManageChain.String(), 0, 0, ele.ChainID.Bytes()[:20], &(ele.Sk1))
	if err != nil {
		return "", ""
	}
	entry := btcKey.GetEntry()
	entry.ChainID = ele.ManageChain.String()
	return getMessageString(entry, ec)
}

func getMessageString(e *factom.Entry, ec *factom.ECAddress) (string, string) {
	j, err := factom.ComposeEntryCommit(e, ec)
	if err != nil {
		return "", ""
	}
	tC := new(identity.Reveal)
	err = identity.MapToObject(j, tC)
	if err != nil {
		return "", ""
	}

	j, err = factom.ComposeEntryReveal(e)
	if err != nil {
		return "", ""
	}
	tR := new(identity.Reveal)
	err = identity.MapToObject(j, tR)
	if err != nil {
		return "", ""
	}
	return tC.Params.Message, tR.Params.Message
}

// Returns the private block signing key of the authority
func authKeyLookup(auth interfaces.IHash) string {
	for _, a := range authKeyLibrary {
		if auth.IsSameAs(a.ChainID) {
			return a.NewBlockKey
		}
	}
	return ""
}

func buildMessages() []hardCodedAuthority {
	list := make([]hardCodedAuthority, STACK_HEIGHT)
	cComs := strings.Split(chainCommit, "#")
	for i := 0; i < len(cComs); i = i + 2 {
		index, err := strconv.Atoi(cComs[i])
		if err != nil {
			continue
		}
		list[index].ChainCommits = append(list[index].ChainCommits, cComs[i+1])
	}
	cRevs := strings.Split(chainReveal, "#")
	for i := 0; i < len(cRevs); i = i + 2 {
		index, err := strconv.Atoi(cRevs[i])
		if err != nil {
			continue
		}
		list[index].ChainReveals = append(list[index].ChainReveals, cRevs[i+1])
	}
	eComs := strings.Split(entryCommit, "#")
	for i := 0; i < len(eComs); i = i + 2 {
		index, err := strconv.Atoi(eComs[i])
		if err != nil {
			continue
		}
		list[index].EntryCommits = append(list[index].EntryCommits, eComs[i+1])
	}
	eRevs := strings.Split(entryReveal, "#")
	for i := 0; i < len(eRevs); i = i + 2 {
		index, err := strconv.Atoi(eRevs[i])
		if err != nil {
			continue
		}
		list[index].EntryReveals = append(list[index].EntryReveals, eRevs[i+1])
	}
	chainIDList := strings.Split(chainIDs, "#")
	for i := 0; i < len(chainIDList); i = i + 2 {
		index, err := strconv.Atoi(chainIDList[i])
		if err != nil {
			continue
		}
		next, err := primitives.HexToHash(chainIDList[i+1])
		if err != nil {
			continue
		}
		list[index].ChainID = next
	}
	subChainIDList := strings.Split(subChainIDs, "#")
	for i := 0; i < len(subChainIDList); i = i + 2 {
		index, err := strconv.Atoi(subChainIDList[i])
		if err != nil {
			continue
		}
		next, err := primitives.HexToHash(subChainIDList[i+1])
		if err != nil {
			continue
		}
		list[index].ManageChain = next
	}
	privList := strings.Split(privates, "#")
	for i := 0; i < len(privList); i = i + 2 {
		index, err := strconv.Atoi(privList[i])
		if err != nil {
			continue
		}
		var p [64]byte
		data, err := hex.DecodeString(privList[i+1])
		if err != nil || len(data) < 64 {
			continue
		}
		copy(p[:64], data[:64])
		list[index].Sk1 = p
	}

	for i, l := range list {
		l.Ready = false
		list[i] = l
		if len(l.ChainCommits) != 2 {
			continue
		}
		if len(l.ChainReveals) != 2 {
			continue
		}
		if len(l.EntryCommits) != 2 {
			continue
		}
		if len(l.EntryReveals) != 2 {
			continue
		}
		if len(l.ChainID.Bytes()) != 32 {
			continue
		}
		l.Ready = true
		list[i] = l
	}
	for _, ele := range list {
		if ele.Ready == true {
			ele.Taken = false
			authStack.Push(ele)
		}
	}
	nextAuthority = 0
	return list
}

func v2Request(req *primitives.JSON2Request) (*primitives.JSON2Response, error) {
	j, err := json.Marshal(req)
	if err != nil {
		return nil, err
	}

	resp, err := http.Post(
		"http://localhost:8088/v2",
		"application/json",
		bytes.NewBuffer(j))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	r := primitives.NewJSON2Response()
	if err := json.Unmarshal(body, r); err != nil {
		return nil, err
	}

	return r, nil
}

func shad(data []byte) []byte {
	h1 := sha256.Sum256(data)
	h2 := sha256.Sum256(h1[:])
	return h2[:]
}
