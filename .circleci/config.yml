version: 2

jobs:

  # Alpine build
  build:
    working_directory: /go/src/github.com/FactomProject/factomd

    docker:
      - image: docker:17.06.0-ce-git

    steps:
      - checkout

      - setup_remote_docker:
          version: 17.06.0-ce

      # The main (only) thing we care about is caching the /vendor dir.
      #   Hence, checksumming glide.lock
      - restore_cache:
          keys:
            - v3-factomd-alpine-cache-{{ checksum "glide.lock" }}

      # Load the image if the cache hit
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /images/image.tar | true

      - run:
          name: Install dependencies
          command: |
            apk add --no-cache  bash groff py-pip
            pip install awscli

      - run:
          name: Get Version
          command: |
            export VERSION=`cat VERSION`
            TAG="$VERSION" && \
            echo "export TAG=$TAG" >> $BASH_ENV

      # Need to source $bash_env 'cos this is alpine (and sh)
      - run:
          name: Build the baseline image
          command: |
            source $BASH_ENV
            docker build -t factomd -f Dockerfile.alpine .

      - run:
          name: Push  master / develop to DockerHub
          command: |
            source $BASH_ENV
            docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag factomd factominc/factomd:${TAG}-alpine
              docker tag factomd factominc/factomd:alpine
              docker push factominc/factomd:${TAG}-alpine
              docker push factominc/factomd:alpine
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              docker tag factomd factominc/factomd:${TAG}-alpine-develop
              docker push factominc/factomd:${TAG}-alpine-develop
            fi

      # This isn't pushed to ubuntu, 'cos we only use this for deploys
      - run:
          name: Push the branch to AWS
          command: |
            source $BASH_ENV
            login="$(aws ecr get-login  --no-include-email --region $AWS_REGION)"
            ${login}
            docker tag factomd "${AWS_REPO_BASE_URI}/factomd:${CIRCLE_SHA1}"
            docker push "${AWS_REPO_BASE_URI}/factomd:${CIRCLE_SHA1}"

      - run:
          name: Save the image cache
          command: |
            mkdir -p /images
            docker save -o /images/image.tar factomd $(docker history -q factomd |grep -v missing | grep -v none)

      - save_cache:
          key: v3-factomd-alpine-cache-{{ checksum "glide.lock" }}
          paths:
            - /images

  # Regular dockerfile
  ubuntu_build:
    working_directory: /go/src/github.com/FactomProject/factomd

    docker:
      - image: docker:17.06.0-ce-git

    steps:
      - checkout

      - setup_remote_docker:
          version: 17.06.0-ce

      # The main (only) thing we care about is caching the /vendor dir.
      #   Hence, checksumming glide.lock
      - restore_cache:
          keys:
            - v3-factomd-ubuntu-cache-{{ checksum "glide.lock" }}

      # Load the image if the cache hit
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /images/image.tar | true

      - run:
          name: Install bash
          command: apk add --no-cache  bash

      - run:
          name: Get Version
          command: |
            export VERSION=`cat VERSION`
            TAG="$VERSION" && \
            echo "export TAG=$TAG" >> $BASH_ENV

      # Need to source $bash_env 'cos this is alpine (and sh)
      - run:
          name: Build the baseline image
          command: |
            source $BASH_ENV
            docker build -t factomd -f Dockerfile .

      - run:
          name: Tag this as the latest build
          command: |
            source $BASH_ENV


      - run:
          name: Push the images to DockerHub
          command: |
            source $BASH_ENV
            docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag factomd factominc/factomd:${TAG}
              docker tag factomd factominc/factomd:latest
              docker push factominc/factomd:${TAG}
              docker push factominc/factomd:latest
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              docker tag factomd factominc/factomd:${TAG}-develop
              docker push factominc/factomd:${TAG}-develop
            fi

      - run:
          name: Save the image cache
          command: |
            mkdir -p /images
            docker save -o /images/image.tar factomd $(docker history -q factomd |grep -v missing | grep -v none)

      - save_cache:
          key: v3-factomd-ubuntu-cache-{{ checksum "glide.lock" }}
          paths:
            - /images

  test:
    working_directory: /go/src/github.com/FactomProject/factomd
    docker:
      - image: circleci/golang:1.8

    steps:
      - checkout

      - restore_cache:
          keys:
            - factomd-go-build-cache-{{ checksum "glide.lock" }}

      - run:
          name: Get glide
          command: |
            go get -v github.com/Masterminds/glide
            cd $GOPATH/src/github.com/Masterminds/glide
            git checkout tags/v0.12.3
            go install
      - run:
          name: Get goveralls
          command: |
            go get github.com/mattn/goveralls
            cd $GOPATH/src/github.com/Masterminds/glide
            git checkout tags/v0.12.3
            go install
      - run:
          name: Get the dependencies
          command: |
            glide install
      - run:
          name: Build and install the executable
          command: go install -v

      - run:
          name: Run tests!
          command: go test -v $(glide nv)


      - save_cache:
          key: factomd-go-build-cache-{{ checksum "glide.lock" }}
          paths:
            - vendor

  coveralls:
    working_directory: /go/src/github.com/FactomProject/factomd
    docker:
      - image: circleci/golang:1.8

    steps:
      - checkout

      - restore_cache:
          keys:
            - factomd-go-coveralls-cache-{{ checksum "glide.lock" }}

      - run:
          name: Get glide
          command: |
            go get -v github.com/Masterminds/glide
            cd $GOPATH/src/github.com/Masterminds/glide
            git checkout tags/v0.12.3
            go install
      - run:
          name: Get goveralls
          command: |
            go get github.com/mattn/goveralls
            cd $GOPATH/src/github.com/Masterminds/glide
            git checkout tags/v0.12.3
            go install
      - run:
          name: Get the dependencies
          command: |
            glide install
      - run:
          name: Build and install the executable
          command: go install -v

      - run:
          name: Coveralls!
          command: goveralls -v -ignore=$(paste -sd, .coverignore) -service=circle-ci -repotoken=$COVERALLS_TOKEN


      - save_cache:
          key: factomd-go-coveralls-cache-{{ checksum "glide.lock" }}
          paths:
            - vendor


workflows:
  version: 2
  build:
    jobs:
      - build:
          context: org-global

      - ubuntu_build:
          context: org-global

      - test:
          context: org-global

      - coveralls:
          context: org-global

